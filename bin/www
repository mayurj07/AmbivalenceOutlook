#!/usr/bin/env node
var debug = require('debug')('twitter-stream-globe');
var app = require('../app');
var nconf = require('nconf');
var Twit = require('twit');

// First, read values from the system environment:
nconf.env();
// You can override system env config values here:
nconf.file({file: 'config.json'});
// else:
nconf.defaults({
    'PORT': process.env.OPENSHIFT_NODEJS_PORT || process.env.PORT || 3000,
    'BIND_IP': process.env.OPENSHIFT_NODEJS_IP || '0.0.0.0'
});
app.set('port', nconf.get("PORT"));

var server = app.listen(nconf.get("PORT"), function () {
    console.log('App server listening on port ' + server.address().port);
    console.log('Process ' + process.pid + ' is listening to all incoming requests');
});

//nconf.get("BIND_IP")

var io = require('socket.io').listen(server);

var twitter = new Twit({
    consumer_key: nconf.get('TWITTER_CONSUMER_KEY'),
    consumer_secret: nconf.get('TWITTER_CONSUMER_SECRET'),
    access_token: nconf.get('TWITTER_ACCESS_TOKEN'),
    access_token_secret: nconf.get('TWITTER_TOKEN_SECRET')
});
stream = null;

io.sockets.on('connection', function (socket) {

    socket.on("start tweets", function () {

        if (stream === null) {
            //Connect to twitter stream passing in filter for entire world.

            stream = twitter.stream('statuses/filter', {
                track: ['love', 'hate'],
                locations: '-180,-90,180,90',
                language: 'en'
            });

            stream.on('tweet', function (data) {
                // Does the JSON result have coordinates
                if (data.coordinates) {
                    if (data.coordinates !== null) {

                        //If so then build up some nice json and send out to web sockets
                        var outputPoint = {
                            "lat": data.coordinates.coordinates[0],
                            "lng": data.coordinates.coordinates[1]
                        };

                        socket.broadcast.emit("twitter-stream", outputPoint);
                        //Send out to web sockets channel.
                        socket.emit('twitter-stream', outputPoint);
                    }
                }

            });

            stream.on('limit', function (limitMessage) {
                return console.log(limitMessage);
            });

            stream.on('warning', function (warning) {
                return console.log(warning);
            });

            stream.on('disconnect', function (disconnectMessage) {
                return console.log(disconnectMessage);
            });
        }
    });

    // Emits signal to the client telling them that the
    // they are connected and can start receiving Tweets
    socket.emit("connected");
});


console.log('Open: http://localhost:3000/');


